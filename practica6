#include <stdio.h>
#include <math.h>

// Función para verificar si un número es primo
int esPrimo(int num) {
    if (num <= 1) return 0;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0) return 0;
    }
    return 1;
}

// Función para generar la secuencia de Fibonacci filtrada
void fibonacciFiltrado(int k) {
    int fib[1000]; // Arreglo para almacenar los términos de Fibonacci
    int i = 0, j = 0;

    // Generar la secuencia de Fibonacci hasta el primer término mayor que k
    fib[i++] = 0;
    fib[i++] = 1;
    
    // Generar la secuencia y omitir los términos en posiciones primarias
    while (1) {
        fib[i] = fib[i - 1] + fib[i - 2];
        if (fib[i] > k) break;
        
        // Omitir términos en posiciones primarias
        if (!esPrimo(i)) {
            i++;
        }
    }
    
    // Mostrar la secuencia filtrada
    printf("Secuencia de Fibonacci filtrada (sin términos en posiciones primarias):\n");
    for (int t = 0; t < i; t++) {
        printf("%d ", fib[t]);
    }
    printf("\n");
    
    // Encontrar la solución óptima sumando los términos más grandes posibles
    int suma = 0, termino = 0, count = 0;
    while (k > 0) {
        for (int j = i - 1; j >= 0; j--) {
            if (fib[j] <= k) {
                k -= fib[j];
                count++;
                break;
            }
        }
    }
    
    // Mostrar la solución óptima
    printf("Solución Óptima:\n");
    printf("Se necesitan %d términos\n", count);
}

int main() {
    // Calcular el valor de K en tiempo real (con el ejemplo proporcionado)
    int dia = 25, mes = 12, anio = 1995;
    int K = (dia * 100) + (mes * 10) + (anio % 100);
    
    // Mostrar el valor de K
    printf("Valor de K: %d\n", K);
    
    // Llamar a la función para resolver el problema
    fibonacciFiltrado(K);
    
    return 0;
}
